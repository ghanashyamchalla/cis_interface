language: python
sudo: required
cache:
  pip: true
  directories:
    - $HOME/.ccache  # https://github.com/travis-ci/travis-ci/issues/5853

addons:
  apt:
    packages: &native_deps_apt
      - strace
      - valgrind
    update: true
  homebrew: &native_deps_brew
    packages:
      - valgrind
    update: true

os:
  - linux

python:
  - 3.6

env:
  global:
    NUMPY=numpy
    MATPLOTLIB=matplotlib
    MPLBACKEND=agg
    JSONSCHEMA=jsonschema
    INSTALLZMQ=1
    INSTALLRMQ=0
    INSTALLAPY=0
    INSTALLLPY=0
    INSTALLR=1
    YGG_SECOND_TEST=
    BUILDDOCS=0
    YGG_TEST_FLAGS="--test-suite=examples"
  matrix:
    - YGG_TEST_FLAGS="--test-suite=examples_part1"
    - YGG_TEST_FLAGS="--test-suite=examples_part2"
    - YGG_CONDA=yes YGG_TEST_FLAGS="--long-running" INSTALLRMQ=1 INSTALLAPY=1 YGG_SECOND_TEST="yggtest --ci --default-comm=IPCComm --long-running"
    # - YGG_CONDA=yes YGG_TEST_FLAGS="--test-suite=types --languages R c"
    # - YGG_TEST_FLAGS="--test-suite=types --languages matlab python cpp"

before_install:
  - |
    echo Installing os level packages...;
    if [[ $TRAVIS_OS_NAME == 'linux' ]]; then
       export PATH=/usr/lib/ccache:$PATH
    fi
    # if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
    #    export PATH=/usr/local/opt/ccache/libexec:$PATH
    # fi

    if [[ -n "$TRAVIS_PYTHON_VERSION" ]]; then
      if [[ -n "$YGG_CONDA" ]]; then
        export YGG_CONDA=$TRAVIS_PYTHON_VERSION
      else
        export YGG_PYTHON=$TRAVIS_PYTHON_VERSION
      fi
    fi
    echo "YGG_CONDA = $YGG_CONDA"
    echo "YGG_PYTHON = $YGG_PYTHON"

    # Install miniconda
    if [[ -n "$YGG_CONDA" || $INSTALLLPY == '1' ]]; then
      echo Installing Python using conda...;
      if [[ "$TRAVIS_OS_NAME" == "linux" ]]; then MINICONDA_OS=Linux; else MINICONDA_OS=MacOSX; fi
      # At one point this saved time when testing in a Python 2.7 conda environment, but
      # recent version of conda build have issues when the base conda is not Python 3
      # wget https://repo.anaconda.com/miniconda/Miniconda${YGG_CONDA:0:1}-latest-$MINICONDA_OS-x86_64.sh -O miniconda.sh
      wget https://repo.anaconda.com/miniconda/Miniconda3-latest-$MINICONDA_OS-x86_64.sh -O miniconda.sh
      bash miniconda.sh -b -p $HOME/miniconda
      export PATH="$HOME/miniconda/bin:$PATH"
      hash -r

      # Download and point to older SDK on OSX
      echo "TRAVIS_OS_NAME = ${TRAVIS_OS_NAME}"
      if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
        conda info -a
        # Install older Mac SDK so that conda llvm (7) can be used
        # https://github.com/conda-forge/mpi-feedstock/issues/4
        export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-10.9}
        export CONDA_BUILD_SYSROOT="$(xcode-select -p)/Platforms/MacOSX.platform/Developer/SDKs/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk"
        export SDKROOT=${CONDA_BUILD_SYSROOT}
        echo "MACOSX_DEPLOYMENT_TARGET = ${MACOSX_DEPLOYMENT_TARGET}"
        echo "CONDA_BUILD_SYSROOT = ${CONDA_BUILD_SYSROOT}"
        echo "SDKROOT = ${SDKROOT}"

        if [[ ! -d ${CONDA_BUILD_SYSROOT} || "$OSX_FORCE_SDK_DOWNLOAD" == "1" ]]; then
          echo "Downloading ${MACOSX_DEPLOYMENT_TARGET} sdk to ${CONDA_BUILD_SYSROOT}"
          curl -L -O https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk.tar.xz
          tar -xf MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk.tar.xz -C "$(dirname "$CONDA_BUILD_SYSROOT")"
          ls "$(dirname "$CONDA_BUILD_SYSROOT")"
          # set minimum sdk version to our target
          plutil -replace MinimumSDKVersion -string ${MACOSX_DEPLOYMENT_TARGET} $(xcode-select -p)/Platforms/MacOSX.platform/Info.plist
          plutil -replace DTSDKName -string macosx${MACOSX_DEPLOYMENT_TARGET}internal $(xcode-select -p)/Platforms/MacOSX.platform/Info.plist
          printf "CONDA_BUILD_SYSROOT:\n  - ${CONDA_BUILD_SYSROOT}  # [osx]\n" > ~/conda_build_config.yaml
        fi
      fi
    fi

    # Install RabbitMQ & Start a server
    if [[ $INSTALLRMQ == '1' ]]; then
       if [[ $TRAVIS_OS_NAME == 'osx' || $TRAVIS_DIST == 'xenial' ]]; then
          echo Installing RabbitMQ...;
          if [[ $TRAVIS_OS_NAME == 'osx' ]]; then
             brew install rabbitmq
          else
             sudo apt-get install rabbitmq-server
          fi
          echo Starting RabbitMQ...;
          export PATH="${PATH}:/usr/local/sbin";
          sudo /bin/sh -c "RABBITMQ_PID_FILE=$TRAVIS_BUILD_DIR/rabbitmq.pid rabbitmq-server &"
          sudo rabbitmqctl wait "$TRAVIS_BUILD_DIR/rabbitmq.pid"
       fi
       echo Checking rabbitmq status...;
       sudo rabbitmqctl status
    fi

    # Setup environment
    if [[ -n "$YGG_CONDA" ]]; then
      python utils/ci_setup.py conda env $YGG_CONDA
    else
      python utils/ci_setup.py pip env $YGG_PYTHON
    fi

    # Activate environment
    if [[ -n "$YGG_CONDA" || $INSTALLLPY == '1' ]]; then
      source activate test-environment
    fi
    if [[ -n "$YGG_PYTHON" && $TRAVIS_OS_NAME == 'osx' ]]; then
      source venv/bin/activate
    fi

install:
  - |
    # setup environment
    if [[ $TRAVIS_OS_NAME == 'linux' ]]; then
      ccache -s
    fi

    # Build and install
    if [[ -n "$YGG_CONDA" ]]; then
      python utils/ci_setup.py conda deploy
    else
      if [[ $INSTALLR == '1' ]]; then
        export YGG_USE_SUDO_FOR_R=1
      fi
      python utils/ci_setup.py pip deploy
    fi

script:
  - yggtest --ci $YGG_TEST_FLAGS
  - $YGG_SECOND_TEST


after_success:
  - |
    coveralls
    codecov


stages:
  - warm-up
  - test
  - test-with-cache
  - deploy


jobs:
  fast_finish: true
  include:
    # Tests
    - stage: test
      os: linux
      env: YGG_TEST_FLAGS="--test-suite=types --languages matlab python cpp"
      python: 3.7
      dist: xenial
      sudo: true
    - os: linux
      env: YGG_TEST_FLAGS="--test-suite=types --languages R c"
      python: 3.7
      dist: xenial
      sudo: true
    - os: linux
      env: YGG_TEST_FLAGS="--test-suite=timing" YGG_DEFAULT_COMM=ZMQComm
      python: 3.7
      dist: xenial
      sudo: true
    - os: osx
      python: 3.6
      language: generic  # https://github.com/travis-ci/travis-ci/issues/2312
      cache:
        pip: false
        directories:
          - $HOME/Library/Caches/pip
          - $HOME/Library/Caches/Homebrew
          - $HOME/R/Library
      env: YGG_PYTHON=3.6 R_LIBS_USER=$HOME/R/Library YGG_TEST_FLAGS="tests/test_tools.py --test-suite=types --languages R c" INSTALLR=0
    - os: osx
      python: 3.7
      language: generic  # https://github.com/travis-ci/travis-ci/issues/2312
      cache:
        pip: false
        directories:
          - $HOME/Library/Caches/pip
          - $HOME/Library/Caches/Homebrew
      env: YGG_CONDA=3.7 YGG_TEST_FLAGS="serialize --test-suite=examples_part1 communication/tests/test_IPCComm.py communication/tests/test_RMQAsyncComm.py --test-suite=timing" INSTALLZMQ=0
      script:
        - yggconfig --remove-file
        - yggtest --ci tests/test_config.py $YGG_TEST_FLAGS
      
    - name: "Build docs"
      python: 3.6
      env: BUILDDOCS=1
      script: |
              cd docs
              make autodoc
              cd "$TRAVIS_BUILD_DIR"
      after_success: skip
      addons:
        apt:
          packages:
            - *native_deps_apt
            - doxygen
          update: true

    # Docs
    - stage: deploy
      name: "Deploy docs"
      python: 3.6
      env: BUILDDOCS=1
      script: |
              cd docs
              make autodoc
              cd "$TRAVIS_BUILD_DIR"
      after_success: skip
      if: (tag IS present)
      deploy:
        provider: pages
        skip_cleanup: true
        local_dir: docs/build/html/
        keep-history: true
        github_token: $GITHUB_TOKEN  # Set in travis-ci.org dashboard
        on:
          tags: true
        verbose: true
      addons:
        apt:
          packages:
            - *native_deps_apt
            - doxygen
          update: true

    # Deploy
    - stage: deploy
      name: "Deploy to PyPI"
      script: skip
      if: (tag IS present)
      deploy:
        provider: pypi
        skip_existing: true
        distributions: sdist bdist_wheel --universal
        user: langmm
        password:
          secure: cYP65ktykU8vzNpjDxVJ7hb5VIA8pcG0+LfaboyJ/7jJ85OFFMb7k12cuzmcFgyCMzxaMaR74ZwSL1Zs3jwfpsfKt22rdXV3YtAlrbLfHDd1ReoPeg6ZHSHYlZq/pkGowB7OHZMPaF7Pwjl2igWE1ZrJ8q/K2vVCt/cv9JhZXZS3nnC3iTY9jbvq/sWp6QChy61s5ekxf9m3PJBcS3s/n34ZyuQt8eF73YSMlztWNLTBWKIfK2LOpDXXKDWhFRDhlmt3mA88I2HI1ZxFyANIrrMwGEBIJOVWlAfnPOdoI36JW9wqv3DXj9RGVDNcVwfW5/juxMF+DSHORwQDuTn3E6Z0Q/ic6rLndI+vzHjYdjPeLXutggOEGTjq32LP6FkJ+3LyrFoQXwZIZ+FqLRni/HyppoyIQ+S5NneLB7Wj5Hyja7ycmwLZnlnixUz3qHOvIv6Hpv/koDltqyB5gzf0xvbNUMkRCHuuovtbqtmRtxA1BL8VKoGVzZ7zHrWG+iTGZXSFhgrcO1k8OYzxaWR2O/NeeURuy3ViD+xzPSvMASRX0sCULOf3o2rgDdJyTBjW5KZcLqVcOiGZoHgwOjZY0NQ50R7mE7T+CQmoYtil1Ovmm8b6NUhoE0z6jEgDVfEhKo9/WACHamzIQ4afrYsEWlQhDSg+dvrzS7OciILOK+Q=
        on:
          tags: true
